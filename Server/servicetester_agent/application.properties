debug=true
spring.devtools.livereload.enabled=true

#######################################################################
# Agent 웹서버 정보
#######################################################################
server.port=12880
server.url.base=http://localhost:${server.port}

# 루트 저장소(Agent의 파일들이 관리되는 저장소)
agent.storage=C:/servicetester_server/storage/agent

#######################################################################
# 프로젝트 정보
#######################################################################
project.id=servicetester_sut
project.name=servicetester sut project
project.storage=${agent.storage}/${project.id}

#######################################################################
# Warehouse (호출 할 WarHouse의 API 서버 정보)
#######################################################################
warehouse.url=localhost:9000
warehouse.url.base=http://${warehouse.url}
#웹소켓 연결 URI
warehouse.url.baseWS=ws://${warehouse.url}/STWebSocket

#######################################################################
# WatchService 쓰레드 prefix
#######################################################################
watchservice.thread.prefix=WatchAgent_
watchservice.thread.watchstop.url=${server.url.base}/request/watch/stopWatch/{uuid}

#######################################################################
##################################### Collector #######################
#######################################################################
#jar 경로 위치
collector.jar=C:/servicetester_server/workspace/servicetester_collector/st-collector-1.0-SNAPSHOT.jar
#관련 파일이 저장되는 위치
collector.storage=${project.storage}/collector
#CLI 완료 호출 하는 Agent finish API
collector.notify=${server.url.base}/finish/collector
#CLI 에서 Agent finish API 호출 후 결과 파일을 업로드 하는 WH upload API
collector.upload=${warehouse.url.base}/upload/collector
#######################################################################
# Collector: 소스 수집
#######################################################################
#소스 수집 시 호출 하는 CLI jar 파일
collector.sourcefiles.jar=${collector.jar}
#소스 수집 관련 파일이 저장되는 위치
collector.sourcefiles.storage=${collector.storage}/source
#참조하는 로그 설정 파일의 위치
collector.sourcefiles.logback=${project.storage}/logback-collector-source.xml
#완료 호출 하는 Agent finish API
collector.sourcefiles.notify=${collector.notify}/sourcefiles/{uuid}/{isok}
#Agent finish API 호출 후 결과 파일을 업로드 하는 WH upload API
collector.sourcefiles.upload=${collector.upload}/sourcefiles/{uuid}/{isok}

### file system ###
#CLI에서 호출 할 클래스 명
collector.sourcefiles.worker=com.sparrow.servicetester.collector.source.FileSystemCollector
#프로젝트의 소스 관리를 무엇으로 하는지 명시
collector.sourcefiles.manager=filesystem
#가져올 소스의 최상위 경로
#SUT 용
collector.sourcefiles.local=C:/servicetester_server/workspace/target_source

#######################################################################
# Collector: 소스 정보
#######################################################################
collector.structinfos.jar=${collector.jar}
collector.structinfos.storage=${collector.storage}/structure
collector.structinfos.logback=${project.storage}/logback-collector-structure.xml
collector.structinfos.notify=${collector.notify}/structinfos/{uuid}/{isok}
# 결과물 업로드할 Warehouse url
collector.structinfos.upload=${collector.upload}/structinfos/{uuid}/{isok}
# Worker
collector.structinfos.worker=com.sparrow.servicetester.collector.structure.StructureSutJavaCollector
# 로그 파일: 세미콜론(;)으로 구분하여 여러 파일 지정. 전체 경로 지정
collector.structinfos.files=${project.storage}/struct-stuser-list.xml
#가져올 소스의 최상위 경로
collector.structinfos.local=C:/servicetester_server/workspace/target_source
#소스 타입 패턴
#도메인 패턴
collector.structinfos.pattern.domain=^[a-zA-Z0-9\.]*structs\.[a-zA-Z0-9\.\*]*$


#######################################################################
# Generator: 랜덤 생성기
#######################################################################
generator.random.jar=C:/servicetester_server/workspace/servicetester_generator/st-generator-1.0-SNAPSHOT.jar
generator.random.storage=${project.storage}/generator
generator.random.logback=${project.storage}/logback-generator.xml
generator.random.notify=${server.url.base}/finish/generator/{what}/{uuid}/{isok}

# 결과물 업로드할 Warehouse url
generator.random.upload=${warehouse.url.base}/upload/generator/{what}/{uuid}/{isok}

# Worker
generator.random.worker=com.sparrow.servicetester.generator.RandomTCGenerator
generator.random.files=${agent.storage}/generator.0.log; ${agent.storage}/generator.1.log

#######################################################################


#######################################################################
# Runner
#######################################################################
runner.jar=C:/servicetester_server/workspace/servicetester_runner/st-runner-1.0-SNAPSHOT.jar
runner.storage=${project.storage}/runner
runner.logback=${project.storage}/logback-runner.xml
runner.notify=${server.url.base}/finish/runner/{what}/{exeSeq}/{uuid}/{isok}
runner.worker=com.sparrow.servicetester.runner.worker.AgentSocketWorker

# 결과물 업로드할 Warehouse url
runner.upload=${warehouse.url.base}/upload/runner/{what}/{exeSeq}/{uuid}/{isok}

# 테스트 대상 서버
runner.worker.sut=http://localhost:8080

# Workers
runner.worker.api=com.sparrow.servicetester.runner.worker.HttpWorker
runner.worker.query.pre=com.sparrow.servicetester.runner.sqler.UpdateSqler
runner.worker.query.post=com.sparrow.servicetester.runner.sqler.SelectJsonSqler
























#######################################################################
# Collector: 쿼리
#######################################################################
collector.sqllogs.jar=${collector.jar}

collector.sqllogs.storage=${collector.storage}/query
collector.sqllogs.logback=${project.storage}/logback-collector-query.xml
collector.sqllogs.notify=${collector.notify}/sqllogs/{uuid}/{isok}

# 결과물 업로드할 Warehouse url
collector.sqllogs.upload=${collector.upload}/sqllogs/{uuid}/{isok}

# Worker
collector.sqllogs.worker=com.sparrow.servicetester.collector.query.QueryCollector

# 로그 파일: 세미콜론(;)으로 구분하여 여러 파일 지정. 전체 경로 지정
collector.sqllogs.files=${agent.storage}/query.0.log; ${agent.storage}/query.1.log
collector.sqllogs.schema.search=not yet

#######################################################################
# Collector: 전문
#######################################################################
collector.messagelogs.jar=${collector.jar}

collector.messagelogs.storage=${collector.storage}/message
collector.messagelogs.logback=${project.storage}/logback-collector-message.xml
collector.messagelogs.notify=${collector.notify}/messagelogs/{uuid}/{isok}

# 결과물 업로드할 Warehouse url
collector.messagelogs.upload=${collector.upload}/messagelogs/{uuid}/{isok}

# Worker
collector.messagelogs.worker=com.sparrow.servicetester.collector.message.MessageCollector

# 로그 파일: 세미콜론(;)으로 구분하여 여러 파일 지정. 전체 경로 지정
collector.messagelogs.files=${agent.storage}/msg.0.log; ${agent.storage}/msg.1.log
collector.messagelogs.schema.search=not yet




